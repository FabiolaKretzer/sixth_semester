Index: app/philosophers_dinner.cc
===================================================================
--- app/philosophers_dinner.cc	(revision 5038)
+++ app/philosophers_dinner.cc	(working copy)
@@ -1 +1,106 @@
-link ../src/abstraction/semaphore_test.cc
\ No newline at end of file
+// EPOS Semaphore Abstraction Test Program
+
+#include <utility/ostream.h>
+#include <thread.h>
+#include <mutex.h>
+#include <semaphore.h>
+#include <alarm.h>
+#include <display.h>
+
+using namespace EPOS;
+
+const int iterations = 10;
+
+Mutex table;
+
+Thread * phil[5];
+Semaphore * chopstick[5];
+
+OStream cout;
+
+int philosopher(int n, int l, int c)
+{
+    int first = (n < 4)? n : 0;
+    int second = (n < 4)? n + 1 : 4;
+
+    for(int i = iterations; i > 0; i--) {
+
+        table.lock();
+        Display::position(l, c);
+        cout << "thinking";
+        table.unlock();
+
+        Delay thinking(2000000);
+
+        chopstick[first]->p();   // get first chopstick
+        chopstick[second]->p();   // get second chopstick
+
+        table.lock();
+        Display::position(l, c);
+        cout << " eating ";
+        table.unlock();
+
+        Delay eating(1000000);
+
+        chopstick[first]->v();   // release first chopstick
+        chopstick[second]->v();   // release second chopstick
+    }
+
+    table.lock();
+    Display::position(l, c);
+    cout << "  done  ";
+    table.unlock();
+
+    return iterations;
+}
+
+int main()
+{
+    table.lock();
+    Display::clear();
+    Display::position(0, 0);
+    cout << "The Philosopher's Dinner:" << endl;
+
+    for(int i = 0; i < 5; i++)
+        chopstick[i] = new Semaphore;
+
+    phil[0] = new Thread(&philosopher, 0,  5, 32);
+    phil[1] = new Thread(&philosopher, 1, 10, 44);
+    phil[2] = new Thread(&philosopher, 2, 16, 39);
+    phil[3] = new Thread(&philosopher, 3, 16, 24);
+    phil[4] = new Thread(&philosopher, 4, 10, 20);
+
+    cout << "Philosophers are alive and hungry!" << endl;
+
+    Display::position(7, 44);
+    cout << '/';
+    Display::position(13, 44);
+    cout << '\\';
+    Display::position(16, 35);
+    cout << '|';
+    Display::position(13, 27);
+    cout << '/';
+    Display::position(7, 27);
+    cout << '\\';
+    Display::position(19, 0);
+
+    cout << "The dinner is served ..." << endl;
+    table.unlock();
+
+    for(int i = 0; i < 5; i++) {
+        int ret = phil[i]->join();
+        table.lock();
+        Display::position(20 + i, 0);
+        cout << "Philosopher " << i << " ate " << ret << " times " << endl;
+        table.unlock();
+    }
+
+    for(int i = 0; i < 5; i++)
+        delete chopstick[i];
+    for(int i = 0; i < 5; i++)
+        delete phil[i];
+
+    cout << "The end!" << endl;
+
+    return 0;
+}
Index: include/semaphore.h
===================================================================
--- include/semaphore.h	(revision 5038)
+++ include/semaphore.h	(working copy)
@@ -4,6 +4,7 @@
 #define __semaphore_h
 
 #include <synchronizer.h>
+#include <utility/handler.h>
 
 __BEGIN_SYS
 
@@ -20,7 +21,18 @@
     volatile int _value;
 };
 
+class Semaphore_Handler : public Handler
+{
+public:
+    Semaphore_Handler(Semaphore * h) : _handler(h) {};
+    ~Semaphore_Handler() {};
 
+    void operator()() { _handler->v(); }
+	
+private:
+    Semaphore * _handler;
+};
+
 __END_SYS
 
 #endif
Index: include/system/config.h
===================================================================
--- include/system/config.h	(revision 5038)
+++ include/system/config.h	(working copy)
@@ -7,15 +7,15 @@
 // ARCHITECTURE, MACHINE, AND APPLICATION SELECTION
 // This section is generated automatically from makedefs by $EPOS/etc/makefile
 //============================================================================
-#define MODE xxx
-#define ARCH xxx
-#define MACH xxx
-#define MMOD xxx
-#define APPL xxx
-#define __mode_xxx__
-#define __arch_xxx__
-#define __mach_xxx__
-#define __mmod_xxx__
+#define MODE library
+#define ARCH ia32
+#define MACH pc
+#define MMOD legacy
+#define APPL producer_consumer
+#define __mode_library__
+#define __arch_ia32__
+#define __mach_pc__
+#define __mmod_legacy__
 
 #if defined (__arch_avr__) || defined (__mmod_lm3s811__)
 #define __no_networking__
Index: include/utility/handler.h
===================================================================
--- include/utility/handler.h	(revision 5038)
+++ include/utility/handler.h	(working copy)
@@ -7,8 +7,30 @@
 
 __BEGIN_UTIL
 
-typedef void (Handler)();
+class Handler {
 
+public:
+	typedef void (Function)();
+	
+	Handler() {}
+    virtual ~Handler() {}
+	
+	virtual void operator()() = 0;
+};
+
+class Function_Handler : public Handler {
+	
+public:
+	Function_Handler(Function * handler) : _handler(handler) {};
+	~Function_Handler() {};
+	
+	void operator()() {
+		_handler();
+	}
+private:
+	Function* _handler;
+};
+
 __END_UTIL
 
 #endif
Index: src/abstraction/alarm.cc
===================================================================
--- src/abstraction/alarm.cc	(revision 5038)
+++ src/abstraction/alarm.cc	(working copy)
@@ -48,9 +48,10 @@
 {
     db<Alarm>(TRC) << "Alarm::delay(time=" << time << ")" << endl;
 
-    Tick t = _elapsed + ticks(time);
-
-    while(_elapsed < t);
+    Semaphore semaphore(0);
+    Semaphore_Handler handler(&semaphore);
+    Alarm alarm(time, &handler, 1);
+    semaphore.p();
 }
 
 
@@ -63,7 +64,8 @@
 
     _elapsed++;
 
-    if(Traits<Alarm>::visible) {
+    if(Traits<Alarm>::visible)
+    {
         Display display;
         int lin, col;
         display.position(&lin, &col);
@@ -74,28 +76,40 @@
 
     if(next_tick)
         next_tick--;
-    if(!next_tick) {
-        if(next_handler) {
-            db<Alarm>(TRC) << "Alarm::handler(h=" << reinterpret_cast<void *>(next_handler) << ")" << endl;
-            (*next_handler)();
-        }
+
+    if(!next_tick)
+    {
+        Handler * current_handler = next_handler;
+        
         if(_request.empty())
             next_handler = 0;
-        else {
+        else
+        {
             Queue::Element * e = _request.remove();
             Alarm * alarm = e->object();
             next_tick = alarm->_ticks;
             next_handler = alarm->_handler;
+            
             if(alarm->_times != -1)
-                alarm->_times--;
-            if(alarm->_times) {
+                alarm->_times--;            
+
+            if(alarm->_times)
+            {
                 e->rank(alarm->_ticks);
                 _request.insert(e);
             }
         }
+
+        unlock();
+
+        if(current_handler)
+        {
+            db<Alarm>(TRC) << "Alarm::handler(h=" << reinterpret_cast<void *>(next_handler) << ")" << endl;
+            (*current_handler)();
+        }
     }
-
-    unlock();
+    else
+        unlock();
 }
 
 __END_SYS
Index: src/boot/pc_boot.S
===================================================================
--- src/boot/pc_boot.S	(revision 5038)
+++ src/boot/pc_boot.S	(working copy)
@@ -46,7 +46,7 @@
 
 ; The size of ELF object's header in bytes (GCC dependent)
 ; Can be determined with objdump -p $(EPOS)/src/setup/pc_setup | sed -n -e 's/^ *LOAD off *\(0x.*\) vaddr.*$/\1/ p' | head -1
-ELF_HDR_SIZE =           128
+ELF_HDR_SIZE = 0x00000060
 
 ; DISK IMAGE LAYOUT 
 ; -+-----------------------+ DISK_IMAGE_SYS_INFO 
